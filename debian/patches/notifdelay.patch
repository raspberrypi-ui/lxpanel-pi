diff --git a/src/main.c b/src/main.c
index 9e23f65..71b3ad2 100644
--- a/src/main.c
+++ b/src/main.c
@@ -650,19 +650,6 @@ static gboolean check_user_warnings (gpointer data)
     return FALSE;
 }
 
-static gboolean delay_check (gpointer data)
-{
-    /* It seems that once mutter has started, it cannot correctly display windows with
-     * client-side decorations immediately. The reason this has never been observed is
-     * because the only windows which use CSD are tooltips, and they have an inbuilt
-     * delay so are never shown for at least 0.5 seconds after the panel has started,
-     * giving time for mutter to sort itself out. So we implement a similar-length delay
-     * here before calling lxpanel_notify to make its CSD windows work properly...
-     */
-    g_timeout_add (1000, check_user_warnings, data);
-    return FALSE;
-}
-
 static void _start_panels_from_dir(const char *panel_dir, int fallback)
 {
     GDir* dir = g_dir_open( panel_dir, 0, NULL );
@@ -844,7 +831,8 @@ int main(int argc, char *argv[], char *env[])
     if( G_UNLIKELY( ! start_all_panels() ) )
         g_warning( "Config files are not found.\n" );
 
-    g_idle_add (delay_check, first_panel);
+    lxpanel_notify_init (first_panel);
+    g_idle_add (check_user_warnings, first_panel);
 /*
  * FIXME: configure??
     if (config)
diff --git a/src/notify.c b/src/notify.c
index 5529a78..3ce7f8a 100644
--- a/src/notify.c
+++ b/src/notify.c
@@ -36,11 +36,16 @@ SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
 #define TEXT_WIDTH 40
 #define SPACING 5
 
+#define INIT_MUTE 2500
+#define INTERVAL_MS 500
+
 typedef struct {
     GtkWidget *popup;               /* Popup message window*/
     guint hide_timer;               /* Timer to hide message window */
     unsigned int seq;               /* Sequence number */
     guint hash;                     /* Hash of message string */
+    char *message;
+    gboolean shown;
 } NotifyWindow;
 
 
@@ -50,6 +55,7 @@ typedef struct {
 
 static GList *nwins = NULL;         /* List of current notifications */
 static unsigned int nseq = 0;       /* Sequence number for notifications */
+static gint interval_timer = 0;     /* Used to show windows one at a time */
 
 /*----------------------------------------------------------------------------*/
 /* Function prototypes */
@@ -59,6 +65,7 @@ static void show_message (LXPanel *panel, NotifyWindow *nw, char *str);
 static gboolean hide_message (NotifyWindow *nw);
 static void update_positions (GList *item, int offset);
 static gboolean window_click (GtkWidget *widget, GdkEventButton *event, NotifyWindow *nw);
+static gboolean notify_unmute (LXPanel *panel);
 
 /*----------------------------------------------------------------------------*/
 /* Private functions */
@@ -156,13 +163,18 @@ static gboolean hide_message (NotifyWindow *nw)
     int w, h;
 
     // shuffle notifications below up
-    item = g_list_find (nwins, nw);
-    gtk_window_get_size (GTK_WINDOW (nw->popup), &w, &h);
-    update_positions (item->next, - (h + SPACING));
+    if (nw->popup)
+    {
+        item = g_list_find (nwins, nw);
+        gtk_window_get_size (GTK_WINDOW (nw->popup), &w, &h);
+        update_positions (item->next, - (h + SPACING));
+        gtk_widget_destroy (nw->popup);
+    }
 
     if (nw->hide_timer) g_source_remove (nw->hide_timer);
-    if (nw->popup) gtk_widget_destroy (nw->popup);
+
     nwins = g_list_remove (nwins, nw);
+    g_free (nw->message);
     g_free (nw);
     return FALSE;
 }
@@ -190,10 +202,53 @@ static gboolean window_click (GtkWidget *widget, GdkEventButton *event, NotifyWi
     return FALSE;
 }
 
+/* Timer handler to show next window */
+
+static gboolean show_next (LXPanel *panel)
+{
+    NotifyWindow *nw;
+    GList *item;
+    int w, h;
+
+    if (nwins)
+    {
+        // loop through notifications in the list, finding the oldest which is unshown
+        for (item = g_list_last (nwins); item != NULL; item = item->prev)
+        {
+            nw = (NotifyWindow *) item->data;
+
+            // is this one shown?
+            if (nw->shown) continue;
+            nw->shown = TRUE;
+
+            // if not, show the window
+            show_message (panel, nw, nw->message);
+
+            // shuffle existing notifications down
+            gtk_window_get_size (GTK_WINDOW (nw->popup), &w, &h);
+            update_positions (item->next, h + SPACING);
+
+            // if there is a newer notification, re-call the timer else stop
+            if (item->prev) interval_timer = g_timeout_add (INTERVAL_MS, (GSourceFunc) show_next, panel);
+            else interval_timer = 0;
+            return FALSE;
+        }
+    }
+
+    interval_timer = 0;
+    return FALSE;
+}
+
 /*----------------------------------------------------------------------------*/
 /* Public API */
 /*----------------------------------------------------------------------------*/
 
+void lxpanel_notify_init (LXPanel *panel)
+{
+    // set timer for initial display of notifications
+    interval_timer = g_timeout_add (INIT_MUTE, (GSourceFunc) show_next, panel);
+}
+
 unsigned int lxpanel_notify (LXPanel *panel, char *message)
 {
     NotifyWindow *nw;
@@ -223,13 +278,16 @@ unsigned int lxpanel_notify (LXPanel *panel, char *message)
     if (nseq == -1) nseq++;     // use -1 for invalid sequence code
     nw->seq = nseq;
     nw->hash = hash;
+    nw->popup = NULL;
+    nw->message = g_strdup (message);
+    nw->shown = FALSE;
 
-    // show the window
-    show_message (panel, nw, message);
-
-    // shuffle existing notifications down
-    gtk_window_get_size (GTK_WINDOW (nw->popup), &w, &h);
-    update_positions (nwins->next, h + SPACING);
+    // if the timer isn't running, show the notification immediately and start the timer
+    if (interval_timer == 0)
+    {
+        show_next (panel);
+        interval_timer = g_timeout_add (INTERVAL_MS, (GSourceFunc) show_next, panel);
+    }
 
     return nseq;
 }
diff --git a/src/plugin.h b/src/plugin.h
index 98c7747..a04ee6d 100644
--- a/src/plugin.h
+++ b/src/plugin.h
@@ -392,6 +392,7 @@ extern void lxpanel_plugin_update_menu_icon (GtkWidget *item, GtkWidget *image);
 extern void lxpanel_plugin_append_menu_icon (GtkWidget *item, GtkWidget *image);
 extern const char *lxpanel_plugin_get_menu_label (GtkWidget *item);
 
+extern void lxpanel_notify_init (LXPanel *panel);
 extern unsigned int lxpanel_notify (LXPanel *panel, char *message);
 extern void lxpanel_notify_clear (unsigned int seq);
 
