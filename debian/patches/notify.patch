diff --git a/data/ui/panel-pref.glade b/data/ui/panel-pref.glade
index 0435b51..bb41be6 100644
--- a/data/ui/panel-pref.glade
+++ b/data/ui/panel-pref.glade
@@ -29,6 +29,10 @@
     <property name="value">10</property>
     <property name="step_increment">1</property>
   </object>
+  <object class="GtkAdjustment" id="adjustment7">
+    <property name="upper">60</property>
+    <property name="step-increment">5</property>
+  </object>
   <object class="GtkListStore" id="liststore1">
     <columns>
       <!-- column-name item -->
@@ -942,6 +946,92 @@
                     <property name="position">1</property>
                   </packing>
                 </child>
+                <child>
+                  <object class="GtkFrame" id="frame9">
+                    <property name="visible">True</property>
+                    <property name="can-focus">False</property>
+                    <property name="label-xalign">0</property>
+                    <property name="shadow-type">none</property>
+                    <child>
+                      <object class="GtkAlignment" id="alignment15">
+                        <property name="visible">True</property>
+                        <property name="can-focus">False</property>
+                        <property name="xalign">0</property>
+                        <property name="xscale">0</property>
+                        <property name="left-padding">12</property>
+                        <child>
+                          <object class="GtkTable" id="table1">
+                            <property name="visible">True</property>
+                            <property name="can-focus">False</property>
+                            <property name="n-rows">2</property>
+                            <property name="n-columns">2</property>
+                            <property name="column-spacing">4</property>
+                            <property name="row-spacing">2</property>
+                            <child>
+                              <object class="GtkLabel" id="timeout_label">
+                                <property name="visible">True</property>
+                                <property name="can-focus">False</property>
+                                <property name="label" translatable="yes">Timeout (secs):</property>
+                                <property name="xalign">0</property>
+                              </object>
+                              <packing>
+                                <property name="top-attach">1</property>
+                                <property name="bottom-attach">2</property>
+                                <property name="x-options">GTK_FILL</property>
+                                <property name="y-options"/>
+                              </packing>
+                            </child>
+                            <child>
+                              <object class="GtkSpinButton" id="timeout">
+                                <property name="visible">True</property>
+                                <property name="can-focus">True</property>
+                                <property name="invisible-char">â€¢</property>
+                                <property name="text" translatable="yes">0</property>
+                                <property name="primary-icon-activatable">False</property>
+                                <property name="secondary-icon-activatable">False</property>
+                                <property name="adjustment">adjustment7</property>
+                                <property name="climb-rate">1</property>
+                              </object>
+                              <packing>
+                                <property name="left-attach">1</property>
+                                <property name="right-attach">2</property>
+                                <property name="top-attach">1</property>
+                                <property name="bottom-attach">2</property>
+                                <property name="x-options">GTK_FILL</property>
+                                <property name="y-options"/>
+                              </packing>
+                            </child>
+                            <child>
+                              <placeholder/>
+                            </child>
+                            <child>
+                              <object class="GtkCheckButton" id="notifications">
+                                <property name="label" translatable="yes">Show notifications</property>
+                                <property name="visible">True</property>
+                                <property name="can-focus">True</property>
+                                <property name="receives-default">False</property>
+                                <property name="draw-indicator">True</property>
+                              </object>
+                            </child>
+                          </object>
+                        </child>
+                      </object>
+                    </child>
+                    <child type="label">
+                      <object class="GtkLabel" id="label26">
+                        <property name="visible">True</property>
+                        <property name="can-focus">False</property>
+                        <property name="label" translatable="yes">&lt;b&gt;Notifications&lt;/b&gt;</property>
+                        <property name="use-markup">True</property>
+                      </object>
+                    </child>
+                  </object>
+                  <packing>
+                    <property name="expand">False</property>
+                    <property name="fill">True</property>
+                    <property name="position">2</property>
+                  </packing>
+                </child>
               </object>
               <packing>
                 <property name="position">1</property>
diff --git a/src/Makefile.am b/src/Makefile.am
index f193d25..5a316bb 100644
--- a/src/Makefile.am
+++ b/src/Makefile.am
@@ -33,7 +33,8 @@ liblxpanel_la_SOURCES = \
 	plugin.c \
 	conf.c \
 	space.c \
-	input-button.c
+	input-button.c \
+	notify.c
 
 liblxpanel_la_LDFLAGS = \
 	-no-undefined \
diff --git a/src/configurator.c b/src/configurator.c
index c60ca93..f199f00 100644
--- a/src/configurator.c
+++ b/src/configurator.c
@@ -187,6 +187,23 @@ static void edge_right_toggle(GtkToggleButton *widget, LXPanel *p)
         set_edge(p, EDGE_RIGHT);
 }
 
+static void notif_toggle (GtkToggleButton *widget, LXPanel *panel)
+{
+    Panel *p = panel->priv;
+    if (gtk_toggle_button_get_active (widget)) p->notifications = 1;
+    else p->notifications = 0;
+    gtk_widget_set_sensitive (p->notifications_spin, p->notifications);
+    UPDATE_GLOBAL_INT (p, "notifications", p->notifications);
+}
+
+static void notif_timeout (GtkSpinButton* spin, LXPanel* panel)
+{
+    Panel *p = panel->priv;
+    p->notify_timeout = (int) gtk_spin_button_get_value (spin);
+    UPDATE_GLOBAL_INT (p, "notify_timeout", p->notify_timeout);
+}
+
+
 /* only for old UI file, safe fallback */
 static void set_monitor(GtkSpinButton *widget, LXPanel *panel)
 {
@@ -1237,6 +1254,15 @@ void panel_configure( LXPanel* panel, int sel_page )
     g_signal_connect( w, "value-changed",
                       G_CALLBACK(set_margin), panel);
 
+    /* notifications */
+    p->notifications_check = w = (GtkWidget*) gtk_builder_get_object (builder, "notifications");
+    gtk_toggle_button_set_active (GTK_TOGGLE_BUTTON (w), p->notifications);
+    g_signal_connect (w, "toggled", G_CALLBACK (notif_toggle), panel);
+    p->notifications_spin = w = (GtkWidget*) gtk_builder_get_object (builder, "timeout");
+    gtk_spin_button_set_value (GTK_SPIN_BUTTON (w), p->notify_timeout);
+    gtk_widget_set_sensitive (p->notifications_spin, p->notifications);
+    g_signal_connect (w, "value-changed", G_CALLBACK (notif_timeout), panel);
+
     /* size */
     p->width_label = (GtkWidget*)gtk_builder_get_object( builder, "width_label");
     p->width_control = w = (GtkWidget*)gtk_builder_get_object( builder, "width" );
diff --git a/src/lxpanelctl.c b/src/lxpanelctl.c
index 4ee530c..98aff5e 100644
--- a/src/lxpanelctl.c
+++ b/src/lxpanelctl.c
@@ -45,7 +45,8 @@ static const char usage[] =
         "refresh\t\trefresh lxpanel\n"
         "move\t\tmove panel to new monitor\n"
         "exit\t\t\texit lxpanel\n"
-        "command <plugin> <cmd>\tsend a command to a plugin\n\n";
+        "command <plugin> <cmd>\tsend a command to a plugin\n"
+        "notify <message>\tshow a notification message\n\n";
 
 static int get_cmd( const char* cmd )
 {
@@ -65,6 +66,8 @@ static int get_cmd( const char* cmd )
         return LXPANEL_CMD_REFRESH;
     else if( ! strcmp( cmd, "move") )
         return LXPANEL_CMD_MOVE;
+    else if( ! strcmp( cmd, "notify") )
+        return LXPANEL_CMD_NOTIFY;
     return -1;
 }
 
@@ -154,6 +157,34 @@ int main( int argc, char** argv )
         snprintf(&ev.xclient.data.b[2], 18, "%s\t%s", argv[i], argv[i+1]);
     }
 
+    if (cmd == LXPANEL_CMD_NOTIFY)
+    {
+        char tmp[16] = "/tmp/nmsgXXXXXX";
+        int i = 2;
+        FILE *fp;
+        if (argc > 3 && strncmp(argv[2], "--panel=", 8) == 0)
+        {
+            int monitor;
+            int edge = parse_id(argv[2] + 8, &monitor);
+            /* edge: EDGE_NONE ..., monitor: 0 - none, 1...8 - selected */
+            target = ((edge & 0x7) << 4) + (monitor & 0xf);
+            i++;
+        }
+        else
+            target = (EDGE_NONE << 4) + 0; /* edge: none, monitor: none */
+        ev.xclient.data.b[1] = target;
+
+        /* need to use mktemp here to create a temp file for the text - yes, I know mktemp is a security risk,
+         * but the worst anyone can do here is to put a rude message in a notification box, so I'm not that
+         * worried... */
+
+        mktemp (tmp);
+        fp = fopen (tmp, "wb");
+        fprintf (fp, "%s", argv[i]);
+        fclose (fp);
+        snprintf (&ev.xclient.data.b[2], 16, "%s", tmp);
+    }
+
     XSendEvent(dpy, root, False,
                SubstructureRedirectMask|SubstructureNotifyMask, &ev);
     XSync(dpy, False);
diff --git a/src/lxpanelctl.h b/src/lxpanelctl.h
index e5ba1c6..95c6021 100644
--- a/src/lxpanelctl.h
+++ b/src/lxpanelctl.h
@@ -35,7 +35,8 @@ typedef enum {
     LXPANEL_CMD_EXIT,
     LXPANEL_CMD_COMMAND,
     LXPANEL_CMD_REFRESH,
-    LXPANEL_CMD_MOVE
+    LXPANEL_CMD_MOVE,
+    LXPANEL_CMD_NOTIFY
 } PanelControlCommand;
 
 /* this enum was in private.h but it is used by LXPANEL_CMD_COMMAND now */
diff --git a/src/main.c b/src/main.c
index 79e73e5..820e107 100644
--- a/src/main.c
+++ b/src/main.c
@@ -53,6 +53,7 @@
 
 #include "private.h"
 #include "misc.h"
+#include "plugin.h"
 
 #include "lxpanelctl.h"
 #include "dbg.h"
@@ -390,6 +391,42 @@ static void process_client_msg ( XClientMessageEvent* ev )
             } while(0);
             g_free(plugin_type);
             break;
+        case LXPANEL_CMD_NOTIFY:
+            monitor = (ev->data.b[1] & 0xf) - 1; /* 0 for no monitor */
+            edge = (ev->data.b[1] >> 4) & 0x7;
+            if ((ev->data.b[1] & 0x80) != 0)
+                /* some extension, not supported yet */
+                break;
+            do /* use do{}while(0) to enable break */
+            {
+                LXPanel *p;
+                GSList *l;
+                size_t siz;
+                FILE *fp;
+                char *buf;
+
+                /* find the panel by monitor and edge */
+                for (l = all_panels; l; l = l->next)
+                {
+                    p = (LXPanel*)l->data;
+                    if (p->priv->box == NULL) /* inactive panel */
+                        continue;
+                    if (monitor >= 0 && p->priv->monitor != monitor)
+                        continue;
+                    if (edge == EDGE_NONE || p->priv->edge == edge)
+                        break;
+                }
+                if (l == NULL) /* match not found */
+                    break;
+
+                buf = NULL;
+                fp = fopen (&ev->data.b[2], "rb");
+                getdelim (&buf, &siz, 0, fp);
+                fclose (fp);
+                lxpanel_notify (p, buf);
+                free (buf);
+            } while(0);
+            break;
     }
 }
 
diff --git a/src/notify.c b/src/notify.c
new file mode 100644
index 0000000..b61e7cb
--- /dev/null
+++ b/src/notify.c
@@ -0,0 +1,233 @@
+/*
+Copyright (c) 2021 Raspberry Pi (Trading) Ltd.
+All rights reserved.
+
+Redistribution and use in source and binary forms, with or without
+modification, are permitted provided that the following conditions are met:
+    * Redistributions of source code must retain the above copyright
+      notice, this list of conditions and the following disclaimer.
+    * Redistributions in binary form must reproduce the above copyright
+      notice, this list of conditions and the following disclaimer in the
+      documentation and/or other materials provided with the distribution.
+    * Neither the name of the copyright holder nor the
+      names of its contributors may be used to endorse or promote products
+      derived from this software without specific prior written permission.
+
+THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS" AND
+ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED
+WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE
+DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT HOLDER OR CONTRIBUTORS BE LIABLE FOR ANY
+DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES
+(INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES;
+LOSS OF USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND
+ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT
+(INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS
+SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
+*/
+
+#include "private.h"
+#include "panel.h"
+#include "plugin.h"
+
+/*----------------------------------------------------------------------------*/
+/* Macros and typedefs */
+/*----------------------------------------------------------------------------*/
+
+#define TEXT_WIDTH 40
+#define SPACING 5
+
+typedef struct {
+    GtkWidget *popup;               /* Popup message window*/
+    guint hide_timer;               /* Timer to hide message window */
+    unsigned int seq;               /* Sequence number */
+    guint hash;                     /* Hash of message string */
+} NotifyWindow;
+
+
+/*----------------------------------------------------------------------------*/
+/* Global data */
+/*----------------------------------------------------------------------------*/
+
+static GList *nwins = NULL;         /* List of current notifications */
+static unsigned int nseq = 0;       /* Sequence number for notifications */
+
+/*----------------------------------------------------------------------------*/
+/* Function prototypes */
+/*----------------------------------------------------------------------------*/
+
+static void show_message (LXPanel *panel, NotifyWindow *nw, char *str);
+static gboolean hide_message (NotifyWindow *nw);
+static void update_positions (GList *item, int offset);
+static gboolean window_click (GtkWidget *widget, GdkEventButton *event, NotifyWindow *nw);
+
+/*----------------------------------------------------------------------------*/
+/* Private functions */
+/*----------------------------------------------------------------------------*/
+
+/* Create a notification window and position appropriately */
+
+static void show_message (LXPanel *panel, NotifyWindow *nw, char *str)
+{
+    GtkWidget *box, *item;
+    GList *plugins;
+    gint x, y;
+    char *fmt, *cptr;
+
+    /*
+     * In order to get a window which looks exactly like a system tooltip, client-side decoration
+     * must be requested for it. This cannot be done by any public API call in GTK+3.24, but there is an
+     * internal call _gtk_window_request_csd which sets the csd_requested flag in the class' private data.
+     * The code below is compatible with a hacked GTK+3 library which uses GTK_WINDOW_POPUP + 1 as the type
+     * for a window with CSD requested. It should also not fall over with the standard library...
+     */
+    nw->popup = gtk_window_new (GTK_WINDOW_POPUP + 1);
+    if (!nw->popup) nw->popup = gtk_window_new (GTK_WINDOW_POPUP);
+    gtk_window_set_type_hint (GTK_WINDOW (nw->popup), GDK_WINDOW_TYPE_HINT_TOOLTIP);
+    gtk_window_set_resizable (GTK_WINDOW (nw->popup), FALSE);
+
+    GtkStyleContext *context = gtk_widget_get_style_context (nw->popup);
+    gtk_style_context_add_class (context, GTK_STYLE_CLASS_TOOLTIP);
+
+    box = gtk_box_new (GTK_ORIENTATION_VERTICAL, 5);
+    gtk_container_add (GTK_CONTAINER (nw->popup), box);
+
+    fmt = g_strcompress (str);
+
+    // setting gtk_label_set_max_width_chars looks awful, so we have to do this...
+    cptr = fmt;
+    x = 0;
+    while (*cptr)
+    {
+        if (*cptr == ' ' && x >= TEXT_WIDTH) *cptr = '\n';
+        if (*cptr == '\n') x = 0;
+        cptr++;
+        x++;
+    }
+
+    item = gtk_label_new (fmt);
+    gtk_label_set_justify (GTK_LABEL (item), GTK_JUSTIFY_CENTER);
+    gtk_box_pack_start (GTK_BOX (box), item, FALSE, FALSE, 0);
+    g_free (fmt);
+
+    gtk_widget_show_all (nw->popup);
+    gtk_widget_hide (nw->popup);
+
+    plugins = gtk_container_get_children (GTK_CONTAINER (panel->priv->box));
+    lxpanel_plugin_popup_set_position_helper (panel, (GtkWidget *) (g_list_last (plugins))->data, nw->popup, &x, &y);
+    if (panel->priv->edge == EDGE_BOTTOM) gdk_window_move (gtk_widget_get_window (nw->popup), x, SPACING);
+    else gdk_window_move (gtk_widget_get_window (nw->popup), x, y);
+    g_list_free (plugins);
+
+    gdk_window_set_events (gtk_widget_get_window (nw->popup), gdk_window_get_events (gtk_widget_get_window (nw->popup)) | GDK_BUTTON_PRESS_MASK);
+    g_signal_connect (G_OBJECT (nw->popup), "button-press-event", G_CALLBACK (window_click), nw);
+    gtk_window_present (GTK_WINDOW (nw->popup));
+    if (panel->priv->notify_timeout > 0) nw->hide_timer = g_timeout_add (panel->priv->notify_timeout * 1000, (GSourceFunc) hide_message, nw);
+}
+
+/* Destroy a notification window and remove from list */
+
+static gboolean hide_message (NotifyWindow *nw)
+{
+    GList *item;
+    int w, h;
+
+    // shuffle notifications below up
+    item = g_list_find (nwins, nw);
+    gtk_window_get_size (GTK_WINDOW (nw->popup), &w, &h);
+    update_positions (item->next, - (h + SPACING));
+
+    if (nw->hide_timer) g_source_remove (nw->hide_timer);
+    if (nw->popup) gtk_widget_destroy (nw->popup);
+    nwins = g_list_remove (nwins, nw);
+    g_free (nw);
+    return FALSE;
+}
+
+/* Relocate notifications below the supplied item by the supplied vertical offset */
+
+static void update_positions (GList *item, int offset)
+{
+    NotifyWindow *nw;
+    int x, y;
+
+    for (; item != NULL; item = item->next)
+    {
+        nw = (NotifyWindow *) item->data;
+        gdk_window_get_position (gtk_widget_get_window (nw->popup), &x, &y);
+        gdk_window_move (gtk_widget_get_window (nw->popup), x, y + offset);
+    }
+}
+
+/* Handler for mouse click in notification window - closes window */
+
+static gboolean window_click (GtkWidget *widget, GdkEventButton *event, NotifyWindow *nw)
+{
+    hide_message (nw);
+    return FALSE;
+}
+
+/*----------------------------------------------------------------------------*/
+/* Public API */
+/*----------------------------------------------------------------------------*/
+
+unsigned int lxpanel_notify (LXPanel *panel, char *message)
+{
+    NotifyWindow *nw;
+    GList *item;
+    int w, h;
+
+    // check for notifications being disabled
+    if (!panel->priv->notifications) return 0;
+
+    // check to see if this notification is already in the list - just bump it to the top if so...
+    guint hash = g_str_hash (message);
+
+    // loop through windows in the list, looking for the hash
+    for (item = nwins; item != NULL; item = item->next)
+    {
+        // if hash matches, hide the window
+        nw = (NotifyWindow *) item->data;
+        if (nw->hash == hash) hide_message (nw);
+    }
+
+    // create a new notification window and add it to the front of the list
+    nw = g_new (NotifyWindow, 1);
+    nwins = g_list_prepend (nwins, nw);
+
+    // set the sequence number for this notification
+    nseq++;
+    if (nseq == -1) nseq++;     // use -1 for invalid sequence code
+    nw->seq = nseq;
+    nw->hash = hash;
+
+    // show the window
+    show_message (panel, nw, message);
+
+    // shuffle existing notifications down
+    gtk_window_get_size (GTK_WINDOW (nw->popup), &w, &h);
+    update_positions (nwins->next, h + SPACING);
+
+    return nseq;
+}
+
+void lxpanel_notify_clear (unsigned int seq)
+{
+    NotifyWindow *nw;
+    GList *item;
+
+    // loop through windows in the list, looking for the sequence number
+    for (item = nwins; item != NULL; item = item->next)
+    {
+        // if sequence number matches, hide the window
+        nw = (NotifyWindow *) item->data;
+        if (nw->seq == seq)
+        {
+            hide_message (nw);
+            return;
+        }
+    }
+}
+
+
+/* End of file */
+/*----------------------------------------------------------------------------*/
diff --git a/src/panel.c b/src/panel.c
index b3e8efd..8631fe6 100644
--- a/src/panel.c
+++ b/src/panel.c
@@ -622,6 +622,8 @@ static void lxpanel_init(PanelToplevel *self)
     p->defstyle = gtk_widget_get_default_style();
 #endif
     p->point_at_menu = 0;
+    p->notify_timeout = 15;
+    p->notifications = 1;
 }
 
 /* Allocate and initialize new Panel structure. */
@@ -2196,6 +2198,10 @@ panel_parse_global(Panel *p, config_setting_t *cfg)
         p->autohide = i != 0;
     if (config_setting_lookup_int(cfg, "point_at_menu", &i))
         p->point_at_menu = i != 0;
+    if (config_setting_lookup_int(cfg, "notify_timeout", &i))
+        p->notify_timeout = i;
+    if (config_setting_lookup_int(cfg, "notifications", &i))
+        p->notifications = i != 0;
     if (config_setting_lookup_int(cfg, "heightwhenhidden", &i))
         p->height_when_hidden = MAX(0, i);
     if (config_setting_lookup_string(cfg, "tintcolor", &str))
@@ -2269,6 +2275,26 @@ static void on_monitors_changed(GdkScreen* screen, gpointer unused)
     }
 }
 
+#define WARN_FILE "/proc/device-tree/chosen/user-warnings"
+
+static gboolean check_user_warnings (gpointer data)
+{
+    if (!access (WARN_FILE, F_OK))
+    {
+        FILE *fp = fopen (WARN_FILE, "rb");
+        if (fp)
+        {
+            char *buf = NULL;
+            size_t siz = 0;
+            while (getline (&buf, &siz, fp) != -1)
+                lxpanel_notify ((LXPanel *) data, g_strstrip (buf));
+            free (buf);
+            fclose (fp);
+        }
+    }
+    return FALSE;
+}
+
 static int panel_start(LXPanel *p)
 {
     config_setting_t *list;
@@ -2290,6 +2316,7 @@ static int panel_start(LXPanel *p)
     if (monitors_handler == 0)
         monitors_handler = g_signal_connect(screen, "monitors-changed",
                                             G_CALLBACK(on_monitors_changed), NULL);
+    g_idle_add (check_user_warnings, p);
     return 1;
 }
 
diff --git a/src/plugin.h b/src/plugin.h
index 50b57b8..98c7747 100644
--- a/src/plugin.h
+++ b/src/plugin.h
@@ -392,6 +392,9 @@ extern void lxpanel_plugin_update_menu_icon (GtkWidget *item, GtkWidget *image);
 extern void lxpanel_plugin_append_menu_icon (GtkWidget *item, GtkWidget *image);
 extern const char *lxpanel_plugin_get_menu_label (GtkWidget *item);
 
+extern unsigned int lxpanel_notify (LXPanel *panel, char *message);
+extern void lxpanel_notify_clear (unsigned int seq);
+
 G_END_DECLS
 
 #endif /* __PLUGIN_H__ */
diff --git a/src/private.h b/src/private.h
index 3d99bb0..698d2c2 100644
--- a/src/private.h
+++ b/src/private.h
@@ -127,6 +127,9 @@ struct _Panel {
     guint spacing;
     guint point_at_menu : 1;
 
+    guint notify_timeout;
+    guint notifications : 1;
+
     guint autohide : 1;
     guint visible : 1;
     int height_when_hidden;
@@ -157,6 +160,8 @@ struct _Panel {
     GtkWidget* edge_top_button;
     GtkWidget* edge_left_button;
     GtkWidget* edge_right_button;
+    GtkWidget* notifications_check;
+    GtkWidget* notifications_spin;
 
     guint initialized : 1;              /* Should be grouped better later, */
     guint ah_far : 1;                   /* placed here for binary compatibility */
