diff --git a/configure.ac b/configure.ac
index 7f7ca5c..78c2324 100644
--- a/configure.ac
+++ b/configure.ac
@@ -193,7 +193,6 @@ plugin_netstatus=
 plugin_netstat=
 plugin_volume=
 plugin_deskno=
-plugin_batt=
 plugin_xkb=
 plugin_kbled=
 plugin_thermal=
@@ -208,7 +207,7 @@ AC_ARG_WITH(plugins,
 [                         'all' builds all plugins (default), 'none' builds none ]
 [                         plugins prefixed with '-' are not built]
 [                         Possible plugins are: ]
-[                         netstatus, netstat, volume, deskno, batt, kbled,]
+[                         netstatus, netstat, volume, deskno, kbled,]
 [                         xkb, thermal, cpufreq, monitors, indicator, weather]
 , plugins="$withval",[plugins="all"])
 
@@ -297,7 +296,6 @@ PLUGINS_LIST="\
     $plugin_netstat \
     $plugin_volume \
     $plugin_deskno \
-    $plugin_batt \
     $plugin_kbled \
     $plugin_xkb \
     $plugin_thermal \
@@ -436,9 +434,6 @@ echo Building dynamic plugins:
     if test x"$plugin_deskno" != x; then
         AC_MSG_RESULT([    deskno - Display desktop number])
     fi
-    if test x"$plugin_batt" != x; then
-        AC_MSG_RESULT([    batt - Monitor battery status])
-    fi
     if test x"$plugin_kbled" != x; then
         AC_MSG_RESULT([    kbled - Indicator for CapsLock, NumLock, and ScrLock])
     fi
diff --git a/plugins/Makefile.am b/plugins/Makefile.am
index 14cffa0..a68bfe7 100644
--- a/plugins/Makefile.am
+++ b/plugins/Makefile.am
@@ -59,7 +59,6 @@ endif
 pkglib_LTLIBRARIES = $(DYNAMIC_PLUGINS)
 
 EXTRA_LTLIBRARIES = \
-	batt.la \
 	cpufreq.la \
 	deskno.la \
 	indicator.la \
@@ -74,12 +73,6 @@ EXTRA_LTLIBRARIES = \
 
 pkglibdir = $(libdir)/lxpanel/plugins
 
-# batt
-batt_la_SOURCES = \
-	batt/batt.c \
-	batt/batt_sys.c
-batt_la_CFLAGS = -I$(srcdir)/batt
-
 # cpufreq
 cpufreq_la_SOURCES = cpufreq/cpufreq.c
 
@@ -297,7 +290,6 @@ flags_DATA= \
 	xkb/flags/za.png
 
 EXTRA_DIST = \
-	batt/batt_sys.h \
 	netstat/netstat.h \
 	netstat/nsconfig.h \
 	netstat/devproc.h \
diff --git a/plugins/batt/batt.c b/plugins/batt/batt.c
deleted file mode 100644
index e4d9c45..0000000
--- a/plugins/batt/batt.c
+++ /dev/null
@@ -1,802 +0,0 @@
-/*
- * ACPI battery monitor plugin for LXPanel
- *
- * Copyright (C) 2007 by Greg McNew <gmcnew@gmail.com>
- * Copyright (C) 2008 by Hong Jen Yee <pcman.tw@gmail.com>
- * Copyright (C) 2009 by Juergen Hoetzel <juergen@archlinux.org>
- * Copyright (C) 2014-2019 Andriy Grytsenko <andrej@rep.kiev.ua>
- *               2015 Balló György <ballogyor@gmail.com>
- *               2015 Stanislav Kozina, Ersin <xersin@users.sf.net>
- *
- * This program is free software; you can redistribute it and/or modify
- * it under the terms of the GNU General Public License as published by
- * the Free Software Foundation; either version 2 of the License, or
- * (at your option) any later version.
- *
- * This program is distributed in the hope that it will be useful,
- * but WITHOUT ANY WARRANTY; without even the implied warranty of
- * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE. See the GNU
- * General Public License for more details.
- *
- * You should have received a copy of the GNU General Public License
- * along with this program; if not, write to the Free Software
- * Foundation, Inc., 59 Temple Place, Suite 330, Boston, MA 02111-1307 USA
- *
- *
- * This plugin monitors battery usage on ACPI-enabled systems by reading the
- * battery information found in /sys/class/power_supply. The update interval is
- * user-configurable and defaults to 3 second.
- *
- * The battery's remaining life is estimated from its current charge and current
- * rate of discharge. The user may configure an alarm command to be run when
- * their estimated remaining battery life reaches a certain level.
- */
-
-/* FIXME:
- *  Here are somethings need to be improvec:
- *  1. Replace pthread stuff with gthread counterparts for portability.
- *  4. Handle failure gracefully under systems other than Linux.
-*/
-
-#ifdef HAVE_CONFIG_H
-#include <config.h>
-#endif
-
-#include <glib.h>
-#include <glib/gi18n.h>
-#include <pthread.h> /* used by pthread_create() and alarmThread */
-#include <semaphore.h> /* used by update() and alarmProcess() for alarms */
-#include <stdlib.h>
-#include <string.h>
-#include <stdarg.h>
-
-#include "dbg.h" /* for ENTER and RET macros */
-#include "batt_sys.h"
-#include "plugin.h" /* all other APIs including panel configuration */
-
-/* The last MAX_SAMPLES samples are averaged when charge rates are evaluated.
-   This helps prevent spikes in the "time left" values the user sees. */
-#define MAX_SAMPLES 10
-
-typedef struct {
-    char *alarmCommand,
-        *backgroundColor,
-        *chargingColor1,
-        *chargingColor2,
-        *dischargingColor1,
-        *dischargingColor2;
-#if GTK_CHECK_VERSION(3, 0, 0)
-    GdkRGBA background,
-        charging1,
-        charging2,
-        discharging1,
-        discharging2;
-#else
-    GdkColor background,
-        charging1,
-        charging2,
-        discharging1,
-        discharging2;
-#endif
-    cairo_surface_t *pixmap;
-    GtkContainer *box;
-    GtkWidget *drawingArea;
-    GtkOrientation orientation;
-    unsigned int alarmTime,
-        border,
-        height,
-        length,
-        numSamples,
-        requestedBorder,
-        *rateSamples,
-        rateSamplesSum,
-        thickness,
-        timer,
-        state_elapsed_time,
-        info_elapsed_time,
-        wasCharging,
-        width,
-        hide_if_no_battery;
-    int battery_number;
-    sem_t alarmProcessLock;
-    battery* b;
-    gboolean has_ac_adapter;
-    gboolean show_extended_information;
-    LXPanel *panel;
-    config_setting_t *settings;
-} lx_battery;
-
-
-typedef struct {
-    char *command;
-    sem_t *lock;
-} Alarm;
-
-static void destructor(gpointer data);
-static void update_display(lx_battery *lx_b, gboolean repaint);
-
-/* alarmProcess takes the address of a dynamically allocated alarm struct (which
-   it must free). It ensures that alarm commands do not run concurrently. */
-static void * alarmProcess(void *arg) {
-    Alarm *a = (Alarm *) arg;
-
-    sem_wait(a->lock);
-    if (system(a->command) != 0)
-        g_warning("plugin batt: failed to execute alarm command \"%s\"", a->command);
-    sleep(51); /* do not spam messages more often than once a minute */
-    sem_post(a->lock);
-
-    g_free(a);
-    return NULL;
-}
-
-
-static void append(gchar **tooltip, gchar *fmt, ...)
-{
-    gchar *old = *tooltip;
-    gchar *new;
-    va_list va;
-
-    va_start(va, fmt);
-    new = g_strdup_vprintf(fmt, va);
-    va_end(va);
-
-    *tooltip = g_strconcat(old, new, NULL);
-
-    g_free(old);
-    g_free(new);
-}
-
-
-/* Make a tooltip string, and display remaining charge time if the battery
-   is charging or remaining life if it's discharging */
-static gchar* make_tooltip(lx_battery* lx_b, gboolean isCharging)
-{
-    gchar * tooltip;
-    gchar * indent = "  ";
-    battery *b = lx_b->b;
-
-    if (b == NULL)
-        return NULL;
-
-    if (isCharging) {
-        if (lx_b->b->seconds > 0) {
-            int hours = lx_b->b->seconds / 3600;
-            int left_seconds = lx_b->b->seconds - 3600 * hours;
-            int minutes = left_seconds / 60;
-            tooltip = g_strdup_printf(
-                    _("Battery %d: %d%% charged, %d:%02d until full"),
-                    lx_b->battery_number, lx_b->b->percentage,
-                    hours,
-                    minutes );
-        }
-        else
-            goto _charged;
-    } else {
-        /* if we have enough rate information for battery */
-        if (lx_b->b->percentage != 100) {
-            int hours = lx_b->b->seconds / 3600;
-            int left_seconds = lx_b->b->seconds - 3600 * hours;
-            int minutes = left_seconds / 60;
-            tooltip = g_strdup_printf(
-                    _("Battery %d: %d%% charged, %d:%02d left"),
-                    lx_b->battery_number, lx_b->b->percentage,
-                    hours,
-                    minutes );
-        } else {
-_charged:
-            tooltip = g_strdup_printf(
-                    _("Battery %d: %d%% charged"),
-                    lx_b->battery_number, lx_b->b->percentage);
-        }
-    }
-
-    if (!lx_b->show_extended_information) {
-        return tooltip;
-    }
-
-    if (b->energy_full_design != -1)
-        append(&tooltip, _("\n%sEnergy full design:\t\t%5d mWh"), indent, b->energy_full_design);
-    if (b->energy_full != -1)
-        append(&tooltip, _("\n%sEnergy full:\t\t\t%5d mWh"), indent, b->energy_full);
-    if (b->energy_now != -1)
-        append(&tooltip, _("\n%sEnergy now:\t\t\t%5d mWh"), indent, b->energy_now);
-    if (b->power_now != -1)
-        append(&tooltip, _("\n%sPower now:\t\t\t%5d mW"), indent, b->power_now);
-
-    if (b->charge_full_design != -1)
-        append(&tooltip, _("\n%sCharge full design:\t%5d mAh"), indent, b->charge_full_design);
-    if (b->charge_full != -1)
-        append(&tooltip, _("\n%sCharge full:\t\t\t%5d mAh"), indent, b->charge_full);
-    if (b->charge_now != -1)
-        append(&tooltip, _("\n%sCharge now:\t\t\t%5d mAh"), indent, b->charge_now);
-    if (b->current_now != -1)
-        append(&tooltip, _("\n%sCurrent now:\t\t\t%5d mA"), indent, b->current_now);
-
-    if (b->voltage_now != -1)
-        append(&tooltip, _("\n%sCurrent Voltage:\t\t%.3lf V"), indent, b->voltage_now / 1000.0);
-
-    return tooltip;
-}
-
-static void set_tooltip_text(lx_battery* lx_b)
-{
-    if (lx_b->b == NULL)
-        return;
-    gboolean isCharging = battery_is_charging(lx_b->b);
-    gchar *tooltip = make_tooltip(lx_b, isCharging);
-    gtk_widget_set_tooltip_text(lx_b->drawingArea, tooltip);
-    g_free(tooltip);
-}
-
-/* FIXME:
-   Don't repaint if percentage of remaining charge and remaining time aren't changed. */
-void update_display(lx_battery *lx_b, gboolean repaint) {
-    cairo_t *cr;
-    battery *b = lx_b->b;
-    /* unit: mW */
-    gboolean isCharging;
-
-    if (! lx_b->pixmap )
-        return;
-
-    cr = cairo_create(lx_b->pixmap);
-    cairo_set_line_width (cr, 1.0);
-
-    /* draw background */
-#if GTK_CHECK_VERSION(3, 0, 0)
-    gdk_cairo_set_source_rgba(cr, &lx_b->background);
-#else
-    gdk_cairo_set_source_color(cr, &lx_b->background);
-#endif
-    cairo_rectangle(cr, 0, 0, lx_b->width, lx_b->height);
-    cairo_fill(cr);
-
-    /* no battery is found */
-    if( b == NULL )
-    {
-        gtk_widget_set_tooltip_text( lx_b->drawingArea, _("No batteries found") );
-        if (lx_b->hide_if_no_battery)
-        {
-            gtk_widget_hide(gtk_widget_get_parent(lx_b->drawingArea));
-            repaint = FALSE;
-        }
-        goto update_done;
-    }
-
-    /* fixme: only one battery supported */
-
-    if (lx_b->b->percentage == 100)
-        isCharging = TRUE; /* if battery is fully charged then draw it green */
-    else
-        isCharging = battery_is_charging ( b );
-
-    /* Consider running the alarm command */
-    if ( !isCharging &&
-        ( ( battery_get_remaining( b ) / 60 ) < (int)lx_b->alarmTime ) )
-    {
-        /* FIXME: this should be done using glibs process functions */
-        /* FIXME: see bug #463: it should not spawn process all the time */
-        /* Alarms should not run concurrently; determine whether an alarm is
-           already running */
-        int alarmCanRun;
-        sem_getvalue(&(lx_b->alarmProcessLock), &alarmCanRun);
-
-        /* Run the alarm command if it isn't already running */
-        if (alarmCanRun) {
-
-            Alarm *a = (Alarm *) malloc(sizeof(Alarm));
-            a->command = lx_b->alarmCommand;
-            a->lock = &(lx_b->alarmProcessLock);
-
-            /* Manage the alarm process in a new thread, which which will be
-               responsible for freeing the alarm struct it's given */
-            pthread_t alarmThread;
-            pthread_create(&alarmThread, NULL, alarmProcess, a);
-        }
-    }
-
-    set_tooltip_text(lx_b);
-
-    int chargeLevel = lx_b->b->percentage * lx_b->length / 100;
-
-    if (lx_b->orientation == GTK_ORIENTATION_HORIZONTAL) {
-
-        /* Draw the battery bar vertically, using color 1 for the left half and
-           color 2 for the right half */
-#if GTK_CHECK_VERSION(3, 0, 0)
-        gdk_cairo_set_source_rgba(cr,
-                isCharging ? &lx_b->charging1 : &lx_b->discharging1);
-#else
-        gdk_cairo_set_source_color(cr,
-                isCharging ? &lx_b->charging1 : &lx_b->discharging1);
-#endif
-        cairo_rectangle(cr, 0, lx_b->height - chargeLevel,
-                        lx_b->width / 2, chargeLevel);
-        cairo_fill(cr);
-#if GTK_CHECK_VERSION(3, 0, 0)
-        gdk_cairo_set_source_rgba(cr,
-                isCharging ? &lx_b->charging2 : &lx_b->discharging2);
-#else
-        gdk_cairo_set_source_color(cr,
-                isCharging ? &lx_b->charging2 : &lx_b->discharging2);
-#endif
-        cairo_rectangle(cr, lx_b->width / 2, lx_b->height - chargeLevel,
-                        (lx_b->width + 1) / 2, chargeLevel);
-        cairo_fill(cr);
-
-    }
-    else {
-
-        /* Draw the battery bar horizontally, using color 1 for the top half and
-           color 2 for the bottom half */
-#if GTK_CHECK_VERSION(3, 0, 0)
-        gdk_cairo_set_source_rgba(cr,
-                isCharging ? &lx_b->charging1 : &lx_b->discharging1);
-#else
-        gdk_cairo_set_source_color(cr,
-                isCharging ? &lx_b->charging1 : &lx_b->discharging1);
-#endif
-        cairo_rectangle(cr, 0, 0, chargeLevel, lx_b->height / 2);
-        cairo_fill(cr);
-#if GTK_CHECK_VERSION(3, 0, 0)
-        gdk_cairo_set_source_rgba(cr,
-                isCharging ? &lx_b->charging2 : &lx_b->discharging2);
-#else
-        gdk_cairo_set_source_color(cr,
-                isCharging ? &lx_b->charging2 : &lx_b->discharging2);
-#endif
-        cairo_rectangle(cr, 0, (lx_b->height + 1) / 2,
-                        chargeLevel, lx_b->height / 2);
-        cairo_fill(cr);
-
-    }
-    gtk_widget_show(gtk_widget_get_parent(lx_b->drawingArea));
-
-update_done:
-    if( repaint )
-        gtk_widget_queue_draw( lx_b->drawingArea );
-
-    check_cairo_status(cr);
-    cairo_destroy(cr);
-}
-
-/* This callback is called every 3 seconds */
-static int update_timout(lx_battery *lx_b) {
-    battery *bat;
-    if (g_source_is_destroyed(g_main_current_source()))
-        return FALSE;
-#if !GTK_CHECK_VERSION(3, 0, 0)
-    GDK_THREADS_ENTER();
-#endif
-    lx_b->state_elapsed_time++;
-    lx_b->info_elapsed_time++;
-
-    bat = battery_update( lx_b->b );
-    if (bat == NULL)
-    {
-        battery_free(lx_b->b);
-
-        /* maybe in the mean time a battery has been inserted. */
-        lx_b->b = battery_get(lx_b->battery_number);
-    }
-
-    update_display( lx_b, TRUE );
-
-#if !GTK_CHECK_VERSION(3, 0, 0)
-    GDK_THREADS_LEAVE();
-#endif
-    return TRUE;
-}
-
-/* An update will be performed whenever the user clicks on the charge bar */
-static gboolean buttonPressEvent(GtkWidget *p, GdkEventButton *event,
-                                 LXPanel *panel)
-{
-    lx_battery *lx_b = lxpanel_plugin_get_data(p);
-
-    update_display(lx_b, TRUE);
-    /* FIXME: open some application for lid/power management may be? */
-
-    return FALSE;
-}
-
-static gint configureEvent(GtkWidget *widget, GdkEventConfigure *event,
-        lx_battery *lx_b)
-{
-    GtkAllocation allocation;
-
-    ENTER;
-
-    gtk_widget_get_allocation(widget, &allocation);
-    if (allocation.width <= 1 && allocation.height <= 1)
-    {
-        /* If plugin is hidden currently then we get 1x1 here */
-        RET(TRUE);
-    }
-
-    if (lx_b->pixmap)
-        cairo_surface_destroy(lx_b->pixmap);
-
-    /* Update the plugin's dimensions */
-    lx_b->width = allocation.width;
-    lx_b->height = allocation.height;
-    if (lx_b->orientation == GTK_ORIENTATION_HORIZONTAL) {
-        lx_b->length = lx_b->height;
-    }
-    else {
-        lx_b->length = lx_b->width;
-    }
-
-    lx_b->pixmap = cairo_image_surface_create (CAIRO_FORMAT_RGB24, allocation.width,
-                                               allocation.height);
-    check_cairo_surface_status(&lx_b->pixmap);
-
-    /* Perform an update so the bar will look right in its new orientation */
-    update_display(lx_b, FALSE);
-
-    /* we enforce border width here because panel sets it to 0 */
-    gtk_container_set_border_width(lx_b->box, lx_b->border);
-
-    RET(TRUE);
-}
-
-
-#if GTK_CHECK_VERSION(3, 0, 0)
-static gint draw(GtkWidget *widget, cairo_t *cr, lx_battery *lx_b) {
-#else
-static gint exposeEvent(GtkWidget *widget, GdkEventExpose *event, lx_battery *lx_b) {
-#endif
-
-    ENTER;
-
-#if GTK_CHECK_VERSION(3, 0, 0)
-    cairo_set_source_rgb(cr, 0, 0, 0); // FIXME: set black color from the style
-#else
-    cairo_t *cr = gdk_cairo_create(gtk_widget_get_window(widget));
-    GtkStyle *style = gtk_widget_get_style(lx_b->drawingArea);
-
-    gdk_cairo_region(cr, event->region);
-    cairo_clip(cr);
-
-    gdk_cairo_set_source_color(cr, &style->black);
-#endif
-    cairo_set_source_surface(cr, lx_b->pixmap, 0, 0);
-    cairo_paint(cr);
-
-    check_cairo_status(cr);
-#if !GTK_CHECK_VERSION(3, 0, 0)
-    cairo_destroy(cr);
-#endif
-
-    RET(FALSE);
-}
-
-/* updates length, border, and height/width appropriate to orientation */
-static void updateSizes(lx_battery *b)
-{
-    b->length = panel_get_height(b->panel);
-    b->border = MIN(b->requestedBorder, (MAX(1, b->length) - 1) / 2);
-    b->length -= 2 * b->border;
-    if (b->orientation == GTK_ORIENTATION_HORIZONTAL)
-        b->height = b->length;
-    else
-        b->width = b->length;
-}
-
-
-static GtkWidget * constructor(LXPanel *panel, config_setting_t *settings)
-{
-    ENTER;
-
-    lx_battery *lx_b;
-    GtkWidget *p;
-    const char *str;
-    int tmp_int;
-
-    lx_b = g_new0(lx_battery, 1);
-
-    /* get requested battery */
-    if (config_setting_lookup_int(settings, "BatteryNumber", &tmp_int))
-        lx_b->battery_number = MAX(0, tmp_int);
-    lx_b->b = battery_get(lx_b->battery_number);
-
-    p = gtk_event_box_new();
-    lxpanel_plugin_set_data(p, lx_b, destructor);
-    gtk_widget_set_has_window(p, FALSE);
-
-    lx_b->box = GTK_CONTAINER(p);
-    lx_b->drawingArea = gtk_drawing_area_new();
-    gtk_widget_add_events(lx_b->drawingArea, GDK_BUTTON_PRESS_MASK |
-                                             GDK_BUTTON_RELEASE_MASK |
-                                             GDK_BUTTON_MOTION_MASK);
-
-    gtk_container_add(lx_b->box, lx_b->drawingArea);
-
-    lx_b->orientation = panel_get_orientation(panel);
-
-    gtk_widget_show(lx_b->drawingArea);
-
-    sem_init(&(lx_b->alarmProcessLock), 0, 1);
-
-    lx_b->alarmCommand = lx_b->backgroundColor = lx_b->chargingColor1 = lx_b->chargingColor2
-            = lx_b->dischargingColor1 = lx_b->dischargingColor2 = NULL;
-
-    /* Set default values for integers */
-    lx_b->alarmTime = 5;
-    lx_b->requestedBorder = 1;
-    lx_b->thickness = 8;
-
-    /* remember instance data */
-    lx_b->panel = panel;
-    lx_b->settings = settings;
-
-    lx_b->show_extended_information = FALSE;
-
-    if (config_setting_lookup_int(settings, "HideIfNoBattery", &tmp_int))
-        lx_b->hide_if_no_battery = (tmp_int != 0);
-    if (config_setting_lookup_string(settings, "AlarmCommand", &str))
-        lx_b->alarmCommand = g_strdup(str);
-    if (config_setting_lookup_string(settings, "BackgroundColor", &str))
-        lx_b->backgroundColor = g_strdup(str);
-    if (config_setting_lookup_string(settings, "ChargingColor1", &str))
-        lx_b->chargingColor1 = g_strdup(str);
-    if (config_setting_lookup_string(settings, "ChargingColor2", &str))
-        lx_b->chargingColor2 = g_strdup(str);
-    if (config_setting_lookup_string(settings, "DischargingColor1", &str))
-        lx_b->dischargingColor1 = g_strdup(str);
-    if (config_setting_lookup_string(settings, "DischargingColor2", &str))
-        lx_b->dischargingColor2 = g_strdup(str);
-    if (config_setting_lookup_int(settings, "AlarmTime", &tmp_int))
-        lx_b->alarmTime = MAX(0, tmp_int);
-    if (config_setting_lookup_int(settings, "BorderWidth", &tmp_int))
-        lx_b->requestedBorder = CLAMP(tmp_int, 0, 6);
-    if (config_setting_lookup_int(settings, "Size", &tmp_int))
-        lx_b->thickness = MAX(1, tmp_int);
-    if (config_setting_lookup_int(settings, "ShowExtendedInformation", &tmp_int))
-        lx_b->show_extended_information = (tmp_int != 0);
-
-    /* Make sure the border value is acceptable */
-    updateSizes(lx_b);
-    if (lx_b->orientation == GTK_ORIENTATION_HORIZONTAL)
-    {
-        lx_b->width = lx_b->thickness;
-        gtk_widget_set_size_request(lx_b->drawingArea, lx_b->width, -1);
-    }
-    else
-    {
-        lx_b->height = lx_b->thickness;
-        gtk_widget_set_size_request(lx_b->drawingArea, -1, lx_b->height);
-    }
-
-    g_signal_connect (G_OBJECT (lx_b->drawingArea),"configure-event",
-          G_CALLBACK (configureEvent), (gpointer) lx_b);
-#if GTK_CHECK_VERSION(3, 0, 0)
-    g_signal_connect (G_OBJECT (lx_b->drawingArea), "draw",
-          G_CALLBACK(draw), (gpointer) lx_b);
-#else
-    g_signal_connect (G_OBJECT (lx_b->drawingArea), "expose-event",
-          G_CALLBACK (exposeEvent), (gpointer) lx_b);
-#endif
-
-    /* Apply more default options */
-    if (! lx_b->alarmCommand)
-        lx_b->alarmCommand = g_strconcat("notify-send \"", _("Battery low"), "\" --icon=battery-caution", NULL);
-    if (! lx_b->backgroundColor)
-        lx_b->backgroundColor = g_strdup("black");
-    if (! lx_b->chargingColor1)
-        lx_b->chargingColor1 = g_strdup("#28f200");
-    if (! lx_b->chargingColor2)
-        lx_b->chargingColor2 = g_strdup("#22cc00");
-    if (! lx_b->dischargingColor1)
-        lx_b->dischargingColor1 = g_strdup("#ffee00");
-    if (! lx_b->dischargingColor2)
-        lx_b->dischargingColor2 = g_strdup("#d9ca00");
-
-#if GTK_CHECK_VERSION(3, 0, 0)
-    gdk_rgba_parse(&lx_b->background, lx_b->backgroundColor);
-    gdk_rgba_parse(&lx_b->charging1, lx_b->chargingColor1);
-    gdk_rgba_parse(&lx_b->charging2, lx_b->chargingColor2);
-    gdk_rgba_parse(&lx_b->discharging1, lx_b->dischargingColor1);
-    gdk_rgba_parse(&lx_b->discharging2, lx_b->dischargingColor2);
-#else
-    gdk_color_parse(lx_b->backgroundColor, &lx_b->background);
-    gdk_color_parse(lx_b->chargingColor1, &lx_b->charging1);
-    gdk_color_parse(lx_b->chargingColor2, &lx_b->charging2);
-    gdk_color_parse(lx_b->dischargingColor1, &lx_b->discharging1);
-    gdk_color_parse(lx_b->dischargingColor2, &lx_b->discharging2);
-#endif
-
-    /* Start the update loop */
-    lx_b->timer = g_timeout_add_seconds( 9, (GSourceFunc) update_timout, (gpointer) lx_b);
-
-    RET(p);
-}
-
-
-static void
-destructor(gpointer data)
-{
-    ENTER;
-
-    lx_battery *b = (lx_battery *)data;
-
-    if (b->b != NULL)
-        battery_free(b->b);
-
-    if (b->pixmap)
-        cairo_surface_destroy(b->pixmap);
-
-    g_free(b->alarmCommand);
-    g_free(b->backgroundColor);
-    g_free(b->chargingColor1);
-    g_free(b->chargingColor2);
-    g_free(b->dischargingColor1);
-    g_free(b->dischargingColor2);
-
-    g_free(b->rateSamples);
-    sem_destroy(&(b->alarmProcessLock));
-    if (b->timer)
-        g_source_remove(b->timer);
-    g_free(b);
-
-    RET();
-
-}
-
-
-static void orientation(LXPanel *panel, GtkWidget *p) {
-
-    ENTER;
-
-    lx_battery *b = lxpanel_plugin_get_data(p);
-
-    if (b->orientation != panel_get_orientation(panel)) {
-        b->orientation = panel_get_orientation(panel);
-        updateSizes(b);
-        if (b->orientation == GTK_ORIENTATION_HORIZONTAL)
-        {
-            b->width = b->thickness;
-            gtk_widget_set_size_request(b->drawingArea, b->width, -1);
-        }
-        else
-        {
-            b->height = b->thickness;
-            gtk_widget_set_size_request(b->drawingArea, -1, b->height);
-        }
-    }
-
-    RET();
-}
-
-
-static gboolean applyConfig(gpointer user_data)
-{
-    ENTER;
-
-    lx_battery *b = lxpanel_plugin_get_data(user_data);
-
-    /* Update the battery we monitor */
-    battery_free(b->b);
-    b->b = battery_get(b->battery_number);
-
-    /* Update colors */
-    if (b->backgroundColor &&
-#if GTK_CHECK_VERSION(3, 0, 0)
-            gdk_rgba_parse(&b->background, b->backgroundColor))
-#else
-            gdk_color_parse(b->backgroundColor, &b->background))
-#endif
-        config_group_set_string(b->settings, "BackgroundColor", b->backgroundColor);
-#if GTK_CHECK_VERSION(3, 0, 0)
-    if (b->chargingColor1 && gdk_rgba_parse(&b->charging1, b->chargingColor1))
-#else
-    if (b->chargingColor1 && gdk_color_parse(b->chargingColor1, &b->charging1))
-#endif
-        config_group_set_string(b->settings, "ChargingColor1", b->chargingColor1);
-#if GTK_CHECK_VERSION(3, 0, 0)
-    if (b->chargingColor2 && gdk_rgba_parse(&b->charging2, b->chargingColor2))
-#else
-    if (b->chargingColor2 && gdk_color_parse(b->chargingColor2, &b->charging2))
-#endif
-        config_group_set_string(b->settings, "ChargingColor2", b->chargingColor2);
-    if (b->dischargingColor1 &&
-#if GTK_CHECK_VERSION(3, 0, 0)
-            gdk_rgba_parse(&b->discharging1, b->dischargingColor1))
-#else
-            gdk_color_parse(b->dischargingColor1, &b->discharging1))
-#endif
-        config_group_set_string(b->settings, "DischargingColor1", b->dischargingColor1);
-    if (b->dischargingColor2 &&
-#if GTK_CHECK_VERSION(3, 0, 0)
-            gdk_rgba_parse(&b->discharging2, b->dischargingColor2))
-#else
-            gdk_color_parse(b->dischargingColor2, &b->discharging2))
-#endif
-        config_group_set_string(b->settings, "DischargingColor2", b->dischargingColor2);
-
-    /* Make sure it is at least 1 px */
-    if (b->thickness < 1)
-        b->thickness = 1;
-
-    /* Make sure the border value is acceptable */
-    b->requestedBorder = MIN(b->requestedBorder, 6);
-    updateSizes(b);
-
-    /* Resize the widget */
-    gtk_container_set_border_width(b->box, b->border);
-    if (b->orientation == GTK_ORIENTATION_HORIZONTAL)
-    {
-        b->width = b->thickness;
-        gtk_widget_set_size_request(b->drawingArea, b->width, -1);
-    }
-    else
-    {
-        b->height = b->thickness;
-        gtk_widget_set_size_request(b->drawingArea, -1, b->height);
-    }
-    /* ensure visibility if requested */
-    if (!b->hide_if_no_battery)
-        gtk_widget_show(user_data);
-    else if (b->b == NULL)
-        gtk_widget_hide(user_data);
-
-    if (b->alarmCommand == NULL)
-        b->alarmCommand = g_strconcat("xmessage ", _("Battery low"), NULL);
-
-    /* update tooltip */
-    set_tooltip_text(b);
-
-    /* update settings */
-    config_group_set_int(b->settings, "HideIfNoBattery", b->hide_if_no_battery);
-    config_group_set_string(b->settings, "AlarmCommand", b->alarmCommand);
-    config_group_set_int(b->settings, "AlarmTime", b->alarmTime);
-    config_group_set_int(b->settings, "BorderWidth", b->requestedBorder);
-    config_group_set_int(b->settings, "Size", b->thickness);
-    config_group_set_int(b->settings, "ShowExtendedInformation",
-                         b->show_extended_information);
-    config_group_set_int(b->settings, "BatteryNumber", b->battery_number);
-
-    update_display(b, TRUE);
-
-    RET(FALSE);
-}
-
-
-static GtkWidget *config(LXPanel *panel, GtkWidget *p) {
-    lx_battery *b = lxpanel_plugin_get_data(p);
-    return lxpanel_generic_config_dlg(_("Battery Monitor"),
-            panel, applyConfig, p,
-            _("Hide if there is no battery"), &b->hide_if_no_battery, CONF_TYPE_BOOL,
-            _("Alarm command"), &b->alarmCommand, CONF_TYPE_STR,
-            _("Alarm time (minutes left)"), &b->alarmTime, CONF_TYPE_INT,
-            _("Background color"), &b->backgroundColor, CONF_TYPE_STR,
-            _("Charging color 1"), &b->chargingColor1, CONF_TYPE_STR,
-            _("Charging color 2"), &b->chargingColor2, CONF_TYPE_STR,
-            _("Discharging color 1"), &b->dischargingColor1, CONF_TYPE_STR,
-            _("Discharging color 2"), &b->dischargingColor2, CONF_TYPE_STR,
-            "", panel_config_int_button_new(_("Border width"), (int *)&b->requestedBorder,
-                                            0, 6), CONF_TYPE_EXTERNAL,
-            "", panel_config_int_button_new(_("Size"), (int *)&b->thickness,
-                                            1, 50), CONF_TYPE_EXTERNAL,
-            _("Show Extended Information"), &b->show_extended_information, CONF_TYPE_BOOL,
-            _("Number of battery to monitor"), &b->battery_number, CONF_TYPE_INT,
-            NULL);
-}
-
-
-FM_DEFINE_MODULE(lxpanel_gtk, batt)
-
-/* Plugin descriptor. */
-LXPanelPluginInit fm_module_init_lxpanel_gtk = {
-    .name        = N_("Battery Monitor"),
-    .description = N_("Display battery status using ACPI"),
-
-    .new_instance = constructor,
-    .config      = config,
-    .reconfigure = orientation,
-    .button_press_event = buttonPressEvent
-};
-
-
-/* vim: set sw=4 sts=4 : */
diff --git a/plugins/batt/batt_sys.c b/plugins/batt/batt_sys.c
deleted file mode 100644
index 5a40273..0000000
--- a/plugins/batt/batt_sys.c
+++ /dev/null
@@ -1,408 +0,0 @@
-/*
- *      batt_sys.h
- *
- *      Copyright 2009 Juergen Hötzel <juergen@archlinux.org>
- *                2015 Henry Gebhardt <hsggebhardt@googlemail.com>
- *                2015 Stanislav Kozina, Ersin <xersin@users.sf.net>
- *                2016-2017 Andriy Grytsenko <andrej@rep.kiev.ua>
- *                2019 Stuart D. Gathman <stuart@gathman.org>
- *
- * 	Parts shameless stolen and glibified from acpi package
- * 	Copyright (C) 2001  Grahame Bowland <grahame@angrygoats.net>
- *	(C) 2008-2009  Michael Meskes  <meskes@debian.org>
- *
- *      This program is free software; you can redistribute it and/or modify
- *      it under the terms of the GNU General Public License as published by
- *      the Free Software Foundation; either version 2 of the License, or
- *      (at your option) any later version.
- *
- *      This program is distributed in the hope that it will be useful,
- *      but WITHOUT ANY WARRANTY; without even the implied warranty of
- *      MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
- *      GNU General Public License for more details.
- *
- *      You should have received a copy of the GNU General Public License
- *      along with this program; if not, write to the Free Software
- *      Foundation, Inc., 51 Franklin Street, Fifth Floor, Boston,
- *      MA 02110-1301, USA.
- */
-
-
-#ifdef HAVE_CONFIG_H
-#  include <config.h>
-#endif
-
-#include "batt_sys.h"
-#include <glib/gstdio.h>
-
-/* shrug: get rid of this */
-#include <stdlib.h>
-#include <string.h>
-
-battery* battery_new() {
-    static int battery_num = 1;
-    battery * b = g_new0 ( battery, 1 );
-    b->type_battery = TRUE;
-    //b->capacity_unit = "mAh";
-    b->energy_full = -1;
-    b->charge_full = -1;
-    b->voltage_now = -1;
-    b->energy_full_design = -1;
-    b->charge_full_design = -1;
-    b->energy_now = -1;
-    b->charge_now = -1;
-    b->current_now = -1;
-    b->power_now = -1;
-    b->state = NULL;
-    b->battery_num = battery_num;
-    b->seconds = -1;
-    b->percentage = -1;
-    //b->poststr = NULL;
-    battery_num++;
-    return b;
-}
-
-
-static gchar* parse_info_file(battery *b, char *sys_file)
-{
-    char *buf = NULL;
-    GString *filename = g_string_new(ACPI_PATH_SYS_POWER_SUPPLY);
-
-    g_string_append_printf (filename, "/%s/%s", b->path, sys_file);
-
-    if (g_file_get_contents(filename->str, &buf, NULL, NULL) == TRUE) {
-        g_strstrip( buf );
-    }
-
-    g_string_free(filename, TRUE);
-
-    return buf;
-}
-
-/* get_gint_from_infofile():
- *         If the sys_file exists, then its value is converted to an int,
- *         divided by 1000, and returned.
- *         Failure is indicated by returning -1. */
-static gint get_gint_from_infofile(battery *b, gchar *sys_file)
-{
-    gchar *file_content = parse_info_file(b, sys_file);
-    gint value = -1;
-
-    if (file_content != NULL)
-        value = atoi(file_content) / 1000;
-    g_free(file_content);
-
-    return value;
-}
-
-static gchar* get_gchar_from_infofile(battery *b, gchar *sys_file)
-{
-    return parse_info_file(b, sys_file);
-}
-
-#if 0 /* never used */
-void battery_print(battery *b, int show_capacity)
-{
-    if ( b->type_battery )
-    {
-        if (b->state) {
-
-            printf("%s %d: %s, %d%%", BATTERY_DESC, b->battery_num - 1, b->state, b->percentage);
-
-            if (b->seconds > 0) {
-                int hours = b->seconds / 3600;
-                int seconds = b->seconds - 3600 * hours;
-                int minutes = seconds / 60;
-                seconds -= 60 * minutes;
-                printf(", %02d:%02d:%02d%s", hours, minutes, seconds,
-                        b->poststr);
-            } else if (b->poststr != NULL) {
-                printf(", %s", b->poststr);
-            }
-
-            printf("\n");
-
-            if (show_capacity && b->charge_full_design > 0) {
-                int percentage = -1;
-                int charge_full = -1;
-                if (b->charge_full <= 100) {
-                    /* some broken systems just give a percentage here */
-                    percentage = b->charge_full;
-                    charge_full = percentage * b->charge_full_design / 100;
-                } else {
-                    percentage = b->charge_full * 100 / b->charge_full_design;
-                    charge_full = b->charge_full;
-                }
-                if (percentage > 100)
-                    percentage = 100;
-
-                printf ("%s %d: design capacity %d %s, "
-                        "last full capacity %d %s = %d%%\n",
-                        BATTERY_DESC, b->battery_num - 1, b->charge_full_design,
-                        b->capacity_unit, charge_full, b->capacity_unit,
-                        percentage);
-            }
-        }
-    }
-}
-#endif
-
-static gboolean battery_inserted(gchar* path)
-{
-    if (path == NULL)
-        return FALSE;
-
-    GString *dirname = g_string_new(ACPI_PATH_SYS_POWER_SUPPLY);
-    GDir *dir;
-
-    g_string_append_printf (dirname, "/%s/", path);
-    dir = g_dir_open(dirname->str, 0, NULL);
-    if (dir)
-        g_dir_close(dir);
-    g_string_free(dirname, TRUE);
-
-    return dir ? TRUE : FALSE;
-}
-
-
-battery* battery_update(battery *b)
-{
-    gchar *gctmp;
-    int promille;
-
-    if (b == NULL)
-        return NULL;
-
-    if (!battery_inserted(b->path))
-        return NULL;
-
-    /* read from sysfs */
-    b->charge_now = get_gint_from_infofile(b, "charge_now");
-    b->energy_now = get_gint_from_infofile(b, "energy_now");
-
-    b->current_now = get_gint_from_infofile(b, "current_now");
-    b->power_now   = get_gint_from_infofile(b, "power_now");
-    /* FIXME: Some battery drivers report -1000 when the discharge rate is
-     * unavailable. Others use negative values when discharging. Best we can do
-     * is to treat -1 as an error, and take the absolute value otherwise.
-     * Ideally the kernel would not export the sysfs file when the value is not
-     * available. */
-    if (b->current_now < -1)
-            b->current_now = - b->current_now;
-
-    b->charge_full = get_gint_from_infofile(b, "charge_full");
-    b->energy_full = get_gint_from_infofile(b, "energy_full");
-
-    b->charge_full_design = get_gint_from_infofile(b, "charge_full_design");
-    b->energy_full_design = get_gint_from_infofile(b, "energy_full_design");
-
-    b->voltage_now = get_gint_from_infofile(b, "voltage_now");
-
-    gctmp = get_gchar_from_infofile(b, "type");
-    b->type_battery = gctmp ? (strcasecmp(gctmp, "battery") == 0) : TRUE;
-    g_free(gctmp);
-
-    g_free(b->state);
-    b->state = get_gchar_from_infofile(b, "status");
-    if (!b->state)
-        b->state = get_gchar_from_infofile(b, "state");
-    if (!b->state) {
-        if (b->charge_now != -1 || b->energy_now != -1
-                || b->charge_full != -1 || b->energy_full != -1)
-            b->state = g_strdup("available");
-        else
-            b->state = g_strdup("unavailable");
-    }
-
-#if 0 /* those conversions might be good for text prints but are pretty wrong for tooltip and calculations */
-    /* convert energy values (in mWh) to charge values (in mAh) if needed and possible */
-
-    if (b->energy_full != -1 && b->charge_full == -1) {
-        if (b->voltage_now != -1 && b->voltage_now != 0) {
-            b->charge_full = b->energy_full * 1000 / b->voltage_now;
-        } else {
-            b->charge_full = b->energy_full;
-            b->capacity_unit = "mWh";
-        }
-    }
-
-    if (b->energy_full_design != -1 && b->charge_full_design == -1) {
-        if (b->voltage_now != -1 && b->voltage_now != 0) {
-            b->charge_full_design = b->energy_full_design * 1000 / b->voltage_now;
-        } else {
-            b->charge_full_design = b->energy_full_design;
-            b->capacity_unit = "mWh";
-        }
-    }
-
-    if (b->energy_now != -1 && b->charge_now == -1) {
-        if (b->voltage_now != -1 && b->voltage_now != 0) {
-            b->charge_now = b->energy_now * 1000 / b->voltage_now;
-            if (b->current_now != -1)
-                b->current_now = b->current_now * 1000 / b->voltage_now;
-        } else {
-            b->charge_now = b->energy_now;
-        }
-    }
-
-    if (b->power_now < -1)
-        b->power_now = - b->power_now;
-    else if (b->power_now == -1 && b->voltage_now != -1 && b->current_now != -1)
-        b->power_now = b->voltage_now * b->current_now / 1000; // P = U*I
-    if (b->power_now != -1 && b->current_now == -1) {
-        if (b->voltage_now != -1 && b->voltage_now != 0)
-            b->current_now = b->power_now * 1000 / b->voltage_now;
-    }
-#endif
-
-    if (b->charge_now != -1 && b->charge_full != -1)
-        promille = (b->charge_now * 1000) / b->charge_full;
-    else if (b->energy_full != -1 && b->energy_now != -1)
-        /* no charge data, let try energy instead */
-        promille = (b->energy_now * 1000) / b->energy_full;
-    else {
-        /* Pinebook has percentage in capacity, and no total energy. */
-        gchar *file_content = parse_info_file(b, "capacity");
-        gint value = -1;
-
-        if (file_content != NULL)
-            value = atoi(file_content);
-        g_free(file_content);
-        if (value != -1 && value <= 100 && value >= 0) {
-            promille = value * 10;
-            b->charge_full = 10000;  /* mAh from pinebook spec */
-            b->charge_now = (value * b->charge_full + 50) / 100;
-        }
-        else
-            promille = 0;
-    }
-
-    b->percentage = (promille + 5) / 10; /* round properly */
-    if (b->percentage > 100)
-        b->percentage = 100;
-
-    if (b->power_now < -1)
-        b->power_now = - b->power_now;
-    if (b->current_now == -1 && b->power_now == -1) {
-        //b->poststr = "rate information unavailable";
-        b->seconds = -1;
-    } else if (!strcasecmp(b->state, "charging")) {
-        if (b->current_now > MIN_PRESENT_RATE) {
-            b->seconds = 3600 * (b->charge_full - b->charge_now) / b->current_now;
-            //b->poststr = " until charged";
-        } else if (b->power_now > 0) {
-            b->seconds = 3600 * (b->energy_full - b->energy_now) / b->power_now;
-        } else {
-            //b->poststr = "charging at zero rate - will never fully charge.";
-            b->seconds = -1;
-        }
-    } else if (!strcasecmp(b->state, "discharging")) {
-        if (b->current_now > MIN_PRESENT_RATE) {
-            b->seconds = 3600 * b->charge_now / b->current_now;
-            //b->poststr = " remaining";
-        } else if (b->power_now > 0) {
-            b->seconds = 3600 * b->energy_now / b->power_now;
-        } else {
-            //b->poststr = "discharging at zero rate - will never fully discharge.";
-            b->seconds = -1;
-        }
-    } else {
-        //b->poststr = NULL;
-        b->seconds = -1;
-    }
-
-    return b;
-}
-
-
-battery *battery_get(int battery_number) {
-    GError * error = NULL;
-    const gchar *entry;
-    gchar *batt_name = NULL;
-    gchar *batt_path = NULL;
-    GDir * dir;
-    battery *b = NULL;
-
-    /* Try the expected path in sysfs first */
-    batt_name = g_strdup_printf(ACPI_BATTERY_DEVICE_NAME "%d", battery_number);
-    batt_path = g_strdup_printf(ACPI_PATH_SYS_POWER_SUPPLY "/%s", batt_name);
-    if (g_file_test(batt_path, G_FILE_TEST_IS_DIR) == TRUE) {
-        b = battery_new();
-        b->path = g_strdup( batt_name);
-        battery_update ( b );
-
-        if (!b->type_battery) {
-            g_warning( "Not a battery: %s", batt_path );
-            battery_free(b);
-            b = NULL;
-        }
-    }
-
-    g_free(batt_name);
-    g_free(batt_path);
-
-    if (b != NULL)
-        return b;
-
-    /*
-     * We didn't find the expected path in sysfs.
-     * Walk the dir and return any battery.
-     */
-    dir = g_dir_open( ACPI_PATH_SYS_POWER_SUPPLY, 0, &error );
-    if ( dir == NULL )
-    {
-        g_warning( "NO ACPI/sysfs support in kernel: %s", error->message );
-        g_error_free(error);
-        return NULL;
-    }
-
-    while ( ( entry = g_dir_read_name (dir) ) != NULL )
-    {
-        b = battery_new();
-        b->path = g_strdup( entry );
-        battery_update ( b );
-
-        /* We're looking for a battery with the selected ID */
-        if (b->type_battery == TRUE) {
-            break;
-        }
-        battery_free(b);
-        b = NULL;
-    }
-    if (b != NULL)
-        g_warning( "Battery entry " ACPI_BATTERY_DEVICE_NAME "%d not found, using %s",
-            battery_number, b->path);
-        // FIXME: update config?
-    else
-        g_warning( "Battery %d not found", battery_number );
-
-    g_dir_close( dir );
-    return b;
-}
-
-void battery_free(battery* bat)
-{
-    if (bat) {
-        g_free(bat->path);
-        g_free(bat->state);
-        g_free(bat);
-    }
-}
-
-gboolean battery_is_charging( battery *b )
-{
-    if (!b->state)
-        return TRUE; // Same as "Unkown"
-    return ( strcasecmp( b->state, "Unknown" ) == 0
-            || strcasecmp( b->state, "Full" ) == 0
-            || strcasecmp( b->state, "Charging" ) == 0
-            || b->current_now == 0 ); /* bug sf.net, #720 */
-}
-
-gint battery_get_remaining( battery *b )
-{
-    return b->seconds;
-}
-
-
-/* vim: set sw=4 et sts=4 : */
diff --git a/plugins/batt/batt_sys.h b/plugins/batt/batt_sys.h
deleted file mode 100644
index 4d75449..0000000
--- a/plugins/batt/batt_sys.h
+++ /dev/null
@@ -1,67 +0,0 @@
-/*
- *      batt_sys.h
- *
- *      Copyright 2009 Juergen Hötzel <juergen@archlinux.org>
- *                2015 Stanislav Kozina, Ersin <xersin@users.sf.net>
- *
- *      This program is free software; you can redistribute it and/or modify
- *      it under the terms of the GNU General Public License as published by
- *      the Free Software Foundation; either version 2 of the License, or
- *      (at your option) any later version.
- *
- *      This program is distributed in the hope that it will be useful,
- *      but WITHOUT ANY WARRANTY; without even the implied warranty of
- *      MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
- *      GNU General Public License for more details.
- *
- *      You should have received a copy of the GNU General Public License
- *      along with this program; if not, write to the Free Software
- *      Foundation, Inc., 51 Franklin Street, Fifth Floor, Boston,
- *      MA 02110-1301, USA.
- */
-
-
-#ifndef BATT_SYS_H
-#define BATT_SYS_H
-
-
-#define BUF_SIZE 1024
-#define ACPI_PATH_SYS_POWER_SUPPLY  "/sys/class/power_supply"
-#define ACPI_BATTERY_DEVICE_NAME    "BAT"
-#define MIN_CAPACITY	 0.01
-#define MIN_PRESENT_RATE 0.01
-#define BATTERY_DESC	"Battery"
-
-#include <glib.h>
-
-typedef struct battery {
-    int battery_num;
-    /* path to battery dir */
-    gchar *path;
-    /* sysfs file contents */
-    int charge_now;
-    int energy_now;
-    int current_now;
-    int power_now;
-    int voltage_now;
-    int charge_full_design;
-    int energy_full_design;
-    int charge_full;
-    int energy_full;
-    /* extra info */
-    int seconds;
-    int percentage;
-    char *state;
-    //const char *poststr;
-    //const char *capacity_unit;
-    int type_battery;
-} battery;
-
-battery *battery_get(int);
-battery *battery_update( battery *b );
-//void battery_print(battery *b, int show_capacity);
-gboolean battery_is_charging( battery *b );
-gint battery_get_remaining( battery *b );
-void battery_free(battery* bat);
-
-#endif
